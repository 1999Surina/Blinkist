{"version":3,"file":"main.f277c64a51c8a3f8bffa.hot-update.js","mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAGA;AAGA;AACA;AACA;AAGA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AADA;AAGA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAFA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AA7BA;AAgCA","sources":["webpack://my-app/./src/reducers/BookReducer.tsx"],"sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { StateProps } from \"../components/Types/Types\";\n\nexport const getBook = createAsyncThunk(\n\t\"books/getBook\",\n\tasync (id: string | undefined) => {\n\t\tconst res = await axios.get(`http://localhost:8000/books/${id}`);\n\t\treturn res.data;\n\t}\n);\n\nexport const updateBook = createAsyncThunk(\n\t\"books/updateBook\",\n\tasync (data: { id: string | undefined; status: string | undefined }) => {\n\t\tconst { id, status } = data;\n\t\tconst res = await axios.patch(`http://localhost:8000/books/${id}`, {\n\t\t\tstatus: status === \"currentlyReading\" ? \"finished\" : \"currentlyReading\",\n\t\t});\n\t\treturn res.data;\n\t}\n);\n\ninterface State {\n\tstatus: string;\n\tbook: StateProps;\n}\n\nconst initialState: State = {\n\tstatus: \"\",\n\tbook: {\n\t\tid: \"0\",\n\t\ttitle: \"Unknown\",\n\t\tauthor: \"Not Known\",\n\t\treads: \"\",\n\t\timage: \"\",\n\t},\n};\n\nconst bookSlice = createSlice({\n\tname: \"books\",\n\tinitialState,\n\treducers: {},\n\textraReducers: (builder) => {\n\t\tbuilder.addCase(getBook.pending, (state, action) => {\n\t\t\tstate.status = \"loading\";\n\t\t});\n\t\tbuilder.addCase(getBook.fulfilled, (state, action) => {\n\t\t\tstate.status = \"success\";\n\t\t\tstate.book = action.payload;\n\t\t});\n\n\t\tbuilder.addCase(getBook.rejected, (state, action) => {\n\t\t\tstate.status = \"failed\";\n\t\t});\n\n\t\tbuilder.addCase(updateBook.pending, (state, action) => {\n\t\t\tstate.status = \"loading\";\n\t\t});\n\n\t\tbuilder.addCase(updateBook.fulfilled, (state, action) => {\n\t\t\tstate.status = \"success\";\n\t\t\tstate.book = action.payload;\n\t\t});\n\n\t\tbuilder.addCase(updateBook.rejected, (state, action) => {\n\t\t\tstate.status = \"failed\";\n\t\t});\n\t},\n});\n\nexport default bookSlice.reducer;\n"],"names":[],"sourceRoot":""}